"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var parse_exports = {};
__export(parse_exports, {
  parse: () => parse
});
module.exports = __toCommonJS(parse_exports);
function parse(sourceCode) {
  const defaultLineInfo = {
    codeBetween: false,
    end: false,
    start: false,
    invalid: false,
    metadataInfo: false
  };
  const result = {
    end: false,
    enteredMetadata: -1,
    lines: []
  };
  let inMetadata = false;
  let done = false;
  for (const [index, line] of sourceCode.lines.entries()) {
    if (done) {
      continue;
    }
    const lineLoc = {
      start: {
        line: index + 1,
        column: 0
      },
      end: {
        line: index + 1,
        column: line.length
      }
    };
    const trimmedLine = line.trim();
    const isLineComment = trimmedLine.startsWith("//");
    const commentContent = trimmedLine.slice(2).trim();
    if (
      // https://github.com/Yash-Singh1/eslint-plugin-userscripts/issues/8
      inMetadata && !isLineComment && // line is not a comment,
      trimmedLine !== ""
    ) {
      result.lines.push({
        value: line,
        lineLoc,
        ...defaultLineInfo,
        codeBetween: true
      });
    } else if (inMetadata && isLineComment && commentContent === "==/UserScript==") {
      result.end = true;
      done = true;
      result.lines.push({
        value: line,
        lineLoc,
        ...defaultLineInfo,
        end: true
      });
    } else if (!inMetadata && isLineComment && commentContent === "==UserScript==") {
      result.enteredMetadata = index;
      inMetadata = true;
      result.lines.push({
        value: line,
        lineLoc,
        ...defaultLineInfo,
        start: true
      });
    } else if (inMetadata && isLineComment && commentContent !== "") {
      if (commentContent.startsWith("@")) {
        const mainContent = commentContent.slice(1);
        result.lines.push({
          value: line,
          lineLoc,
          ...defaultLineInfo,
          metadataInfo: true,
          metadataValue: {
            key: mainContent.split(/[\t ]/)[0],
            value: mainContent.replace(/^.*?[\t ]/, "").trim()
          }
        });
      } else {
        result.lines.push({
          value: line,
          lineLoc,
          ...defaultLineInfo,
          invalid: true
        });
      }
    }
  }
  return result;
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  parse
});
