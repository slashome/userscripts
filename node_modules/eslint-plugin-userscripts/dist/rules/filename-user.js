"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var filename_user_exports = {};
__export(filename_user_exports, {
  default: () => filename_user_default
});
module.exports = __toCommonJS(filename_user_exports);
var filename_user_default = {
  meta: {
    type: "suggestion",
    docs: {
      description: "ensure userscripts end with .user.js",
      category: "Best Practices"
    },
    schema: [
      {
        enum: ["always", "never"]
      }
    ],
    messages: {
      filenameExtension: "Rename '{{ oldFilename }}' to '{{ newFilename }}'"
    }
  },
  create: (context) => {
    var _a;
    const fileName = (_a = context.filename) != null ? _a : context.getFilename();
    if (fileName === "<input>" || fileName === "<text>") {
      return {};
    }
    return {
      Program() {
        if (!fileName.endsWith(".user.js") && (!context.options[0] || context.options[0] === "always") || fileName.endsWith(".user.js") && context.options[0] === "never") {
          context.report({
            loc: { column: 0, line: 1 },
            messageId: "filenameExtension",
            data: {
              newFilename: fileName.replace(
                context.options[0] === "always" ? /.js$/ : /.user.js$/,
                context.options[0] === "always" ? ".user.js" : ".js"
              ),
              oldFilename: fileName
            }
          });
        }
      }
    };
  }
};
