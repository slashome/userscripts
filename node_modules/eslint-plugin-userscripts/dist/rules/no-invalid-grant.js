"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var no_invalid_grant_exports = {};
__export(no_invalid_grant_exports, {
  default: () => no_invalid_grant_default
});
module.exports = __toCommonJS(no_invalid_grant_exports);
var import_createValidator = require("../utils/createValidator");
var import_compat_grant = require("../data/compat-grant");
var no_invalid_grant_default = (0, import_createValidator.createValidator)({
  name: "grant",
  required: false,
  validator: ({ attrVal, context }) => {
    const argument = attrVal.val;
    if (!Object.keys(import_compat_grant.compatMap).includes(argument)) {
      context.report({
        loc: {
          start: {
            line: attrVal.loc.start.line,
            column: 0
          },
          end: attrVal.loc.end
        },
        messageId: "grantHasInvalidArgument",
        data: { argument }
      });
    }
  },
  messages: {
    grantHasInvalidArgument: "'{{ argument }}' is not a valid @grant argument"
  }
});
