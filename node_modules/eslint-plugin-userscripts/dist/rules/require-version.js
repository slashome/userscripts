"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var require_version_exports = {};
__export(require_version_exports, {
  default: () => require_version_default
});
module.exports = __toCommonJS(require_version_exports);
var import_createValidator = require("../utils/createValidator");
const versionRegex = /^(?=[\dA-Za-z–-]*\d[\dA-Za-z–-]*)[\dA-Za-z–-]+(\.[\dA-Za-z–-]+)*([+_]([\dA-Za-z-]+)(\.[\dA-Za-z-]+)*)?\.?\s*$/;
var require_version_default = (0, import_createValidator.createValidator)({
  name: "version",
  required: true,
  validator: ({ attrVal, index, context }) => {
    var _a;
    if (index > 0) {
      context.report({
        loc: attrVal.loc,
        messageId: "multipleVersions"
      });
    }
    const versionWhitespace = (_a = /^(\s*\/\/\s*)/.exec(
      context.sourceCode.lines[attrVal.comment.loc.start.line]
    )) == null ? void 0 : _a[1];
    if (versionWhitespace && !versionRegex.test(attrVal.val)) {
      context.report({
        loc: {
          start: {
            line: attrVal.loc.start.line,
            column: versionWhitespace.length - 1
          },
          end: attrVal.loc.end
        },
        messageId: "invalidVersion"
      });
    }
  },
  messages: {
    multipleVersions: "Include only one version",
    invalidVersion: "Invalid version"
  }
});
