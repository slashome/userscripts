"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var use_homepage_and_url_exports = {};
__export(use_homepage_and_url_exports, {
  default: () => use_homepage_and_url_default
});
module.exports = __toCommonJS(use_homepage_and_url_exports);
var import_createValidator = require("../utils/createValidator");
const homepageAttrs = ["homepage", "homepageURL"];
var use_homepage_and_url_default = (0, import_createValidator.createValidator)({
  name: homepageAttrs,
  validator: ({ attrVal, metadata, context, keyName }) => {
    const attribute = homepageAttrs[0] === keyName ? homepageAttrs[1] : homepageAttrs[0];
    if (!(attribute in metadata)) {
      context.report({
        loc: attrVal.loc,
        messageId: "missingAttribute",
        data: {
          attribute
        },
        fix: function(fixer) {
          return fixer.insertTextAfterRange(
            attrVal.comment.range,
            `
${context.sourceCode.lines.at(attrVal.comment.loc.start.line - 1).replace(/@\S+/, `@${attribute}`)}`
          );
        }
      });
    }
  },
  messages: {
    missingAttribute: "Didn't find attribute '{{ attribute }}' in the metadata"
  },
  fixable: true
});
