"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var metadata_spacing_exports = {};
__export(metadata_spacing_exports, {
  default: () => metadata_spacing_default
});
module.exports = __toCommonJS(metadata_spacing_exports);
var import_parse = require("../utils/parse");
var metadata_spacing_default = {
  meta: {
    type: "suggestion",
    docs: {
      description: "ensure there is a newline between the metadata and the code",
      category: "Best Practices"
    },
    fixable: "whitespace",
    messages: {
      newlineBetween: "There should be a newline between the metadata and the code"
    }
  },
  create: (context) => {
    var _a;
    const sourceCode = context.sourceCode;
    const result = (0, import_parse.parse)(sourceCode);
    const hasMetadata = result.enteredMetadata !== -1 && result.end;
    if (!hasMetadata) {
      return {};
    }
    const metadataLastLineLoc = (_a = result.lines.at(-1)) == null ? void 0 : _a.lineLoc;
    if (!metadataLastLineLoc) {
      return {};
    }
    const hasCodeOtherThanMetadata = sourceCode.lines.length !== metadataLastLineLoc.end.line;
    if (!hasCodeOtherThanMetadata) {
      return {};
    }
    const lineNextToMetadata = sourceCode.lines[metadataLastLineLoc.end.line];
    if (lineNextToMetadata.trim().length > 0) {
      context.report({
        messageId: "newlineBetween",
        loc: metadataLastLineLoc,
        fix: function(fixer) {
          const range = [
            sourceCode.getIndexFromLoc(metadataLastLineLoc.start),
            sourceCode.getIndexFromLoc(metadataLastLineLoc.end)
          ];
          return fixer.insertTextAfterRange(range, "\n");
        }
      });
    }
    return {};
  }
};
