"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var compat_headers_exports = {};
__export(compat_headers_exports, {
  default: () => compat_headers_default
});
module.exports = __toCommonJS(compat_headers_exports);
var import_createValidator = require("../utils/createValidator");
var import_compat_headers = require("../data/compat-headers");
var import_semver = require("semver");
var import_cleanupRange = require("../utils/cleanupRange");
var compat_headers_default = (0, import_createValidator.createValidator)({
  name: "headers",
  description: "ensures compatibility across targeted userscript managers when using headers",
  required: false,
  validator: ({ attrVal, context }) => {
    if (!context.settings.userscriptVersions) {
      return;
    }
    const headerName = attrVal.key;
    const allRequired = context.options[0] && context.options[0].requireAllCompatible;
    const nonLocaleHeaderName = headerName.split(":")[0];
    let allVersionsSupport = true;
    let allVersionsDontSupport = true;
    if (headerName.includes(":") && nonLocaleHeaderName in import_compat_headers.compatMap.localized) {
      for (const versionConstraint in context.settings.userscriptVersions) {
        const foundAssertion = import_compat_headers.compatMap.localized[nonLocaleHeaderName].find(
          (constraint) => constraint.type === versionConstraint
        );
        const supported = foundAssertion ? (0, import_semver.intersects)(
          (0, import_cleanupRange.cleanupRange)(
            context.settings.userscriptVersions[versionConstraint]
          ),
          (0, import_cleanupRange.cleanupRange)(foundAssertion.versionConstraint)
        ) : false;
        if (supported) {
          allVersionsDontSupport = false;
        } else {
          allVersionsSupport = false;
        }
      }
    } else if (headerName in import_compat_headers.compatMap.unlocalized) {
      for (const versionConstraint in context.settings.userscriptVersions) {
        const foundAssertion = import_compat_headers.compatMap.unlocalized[headerName].find(
          (constraint) => constraint.type === versionConstraint
        );
        const supported = foundAssertion ? (0, import_semver.intersects)(
          (0, import_cleanupRange.cleanupRange)(
            context.settings.userscriptVersions[versionConstraint]
          ),
          (0, import_cleanupRange.cleanupRange)(foundAssertion.versionConstraint),
          true
        ) : false;
        if (supported) {
          allVersionsDontSupport = false;
        } else {
          allVersionsSupport = false;
        }
      }
    } else if (import_compat_headers.compatMap.nonFunctional[headerName]) {
      return;
    }
    if (allRequired && !allVersionsSupport) {
      context.report({
        loc: {
          start: {
            line: attrVal.loc.start.line,
            column: 0
          },
          end: attrVal.loc.end
        },
        messageId: "allNotSupportingCompatHeader",
        data: { headerName }
      });
    } else if (!allRequired && allVersionsDontSupport || !(headerName in import_compat_headers.compatMap.nonFunctional || headerName in import_compat_headers.compatMap.unlocalized || nonLocaleHeaderName in import_compat_headers.compatMap.localized)) {
      context.report({
        loc: {
          start: {
            line: attrVal.loc.start.line,
            column: 0
          },
          end: attrVal.loc.end
        },
        messageId: "noSupportingCompatHeader",
        data: { headerName }
      });
    }
  },
  messages: {
    noSupportingCompatHeader: "None of your target versions support '{{ headerName }}'",
    allNotSupportingCompatHeader: "All of your target versions don't support '{{ headerName }}'"
  },
  regexMatch: /./,
  // match every header
  schema: [
    {
      type: "object",
      properties: {
        requireAllCompatible: {
          type: "boolean",
          default: false
        }
      },
      default: {}
    }
  ]
});
