"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var require_download_url_exports = {};
__export(require_download_url_exports, {
  default: () => require_download_url_default
});
module.exports = __toCommonJS(require_download_url_exports);
var import_createValidator = require("../utils/createValidator");
var require_download_url_default = (0, import_createValidator.createValidator)({
  name: "updateURL",
  validator: ({ attrVal, metadata, context, keyName }) => {
    if (keyName === "updateURL" && !metadata["downloadURL"]) {
      context.report({
        loc: attrVal.loc,
        messageId: "includeDownloadURL",
        fix: function(fixer) {
          return fixer.insertTextAfterRange(
            attrVal.comment.range,
            `
${context.sourceCode.lines[attrVal.comment.loc.start.line - 1].replace(/@\S+/, "@downloadURL")}`
          );
        }
      });
    }
  },
  messages: {
    includeDownloadURL: "If you are using 'updateURL', you must also use 'downloadURL'"
  },
  fixable: true
});
