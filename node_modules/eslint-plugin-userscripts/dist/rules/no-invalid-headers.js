"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var no_invalid_headers_exports = {};
__export(no_invalid_headers_exports, {
  default: () => no_invalid_headers_default
});
module.exports = __toCommonJS(no_invalid_headers_exports);
var import_createValidator = require("../utils/createValidator");
var import_compat_headers = require("../data/compat-headers");
const validHeaders = /* @__PURE__ */ new Set([
  ...Object.keys(import_compat_headers.compatMap.nonFunctional),
  ...Object.keys(import_compat_headers.compatMap.unlocalized)
]);
const internationalized = Object.keys(import_compat_headers.compatMap.localized).map(
  (item) => new RegExp(`^${item}(:\\S+)?$`)
);
var no_invalid_headers_default = (0, import_createValidator.createValidator)({
  name: "headers",
  validator: ({ attrVal, context }) => {
    const optionsHeaders = context.options[0] && context.options[0].allowed ? new Set(context.options[0].allowed) : /* @__PURE__ */ new Set();
    for (const value of attrVal) {
      const isValid = validHeaders.has(value.key) || optionsHeaders.has(value.key) || // use regex for internationalised headers
      internationalized.some((regex) => regex.test(value.key));
      if (!isValid) {
        context.report({
          loc: {
            start: {
              line: value.loc.start.line,
              column: 0
            },
            end: value.loc.end
          },
          messageId: "invalidHeader",
          data: {
            header: `@${value.key}`
          }
        });
      }
    }
  },
  messages: {
    invalidHeader: "'{{ header }}' is not a valid userscript header"
  },
  regexMatch: /./,
  // match every header
  runOnce: true,
  schema: [
    {
      type: "object",
      properties: {
        allowed: {
          type: "array",
          default: []
        }
      },
      additionalProperties: false,
      default: {}
    }
  ]
});
